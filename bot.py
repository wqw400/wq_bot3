from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, Bot
from telegram.ext import Dispatcher, CommandHandler, CallbackQueryHandler, CallbackContext
import os

# --- –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–∫–æ–≤ —Ç–µ—Å—Ç–∞ ---
user_scores = {}

# --- –¢–æ–∫–µ–Ω –∏–∑ Secrets Replit ---
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, None)

app = Flask(__name__)

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def start(update: Update, context: CallbackContext):
    keyboard = [
        [InlineKeyboardButton("–°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", callback_data='tips')],
        [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data='quiz')],
        [InlineKeyboardButton("–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏", callback_data='links')],
        [InlineKeyboardButton("–û –±–æ—Ç–µ", callback_data='about')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –∑–∞—â–∏—Ç–µ –æ—Ç –º–æ—à–µ–Ω–Ω–∏–∫–æ–≤. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)
    elif update.callback_query:
        update.callback_query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
def button(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id

    # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
    if query.data == 'tips':
        keyboard = [
            [InlineKeyboardButton("–ö–∞–∫ –Ω–µ –ø–æ–ø–∞—Å—Ç—å—Å—è –Ω–∞ —É–ª–æ–≤–∫–∏", callback_data='tricks')],
            [InlineKeyboardButton("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ–Ω–ª–∞–π–Ω-–ø–ª–∞—Ç–µ–∂–µ–π", callback_data='payments')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
        query.edit_message_text("–°–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'quiz':
        user_scores[user_id] = 0
        keyboard = [
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data='q1')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
        ]
        query.edit_message_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –æ –º–æ—à–µ–Ω–Ω–∏–∫–∞—Ö:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'links':
        query.edit_message_text(
            "–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n"
            "üîπ [–§–µ–¥–µ—Ä–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏](https://www.fsb.ru/)\n"
            "üîπ [–†–æ—Å–∫–æ–º–Ω–∞–¥–∑–æ—Ä](https://rkn.gov.ru/)\n"
            "üîπ [–¶–ë –†–§ - —Å–æ–≤–µ—Ç—ã –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏](https://www.cbr.ru/)"
        )

    elif query.data == 'about':
        query.edit_message_text(
            "–Ø —É—á–µ–±–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç —É–∑–Ω–∞—Ç—å –æ –º–æ—à–µ–Ω–Ω–∏–∫–∞—Ö –∏ –∑–∞—â–∏—Ç–∏—Ç—å —Å–µ–±—è –æ–Ω–ª–∞–π–Ω.\n"
            "–ú–æ–∂–Ω–æ –∏–∑—É—á–∞—Ç—å —Å–æ–≤–µ—Ç—ã, –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏."
        )

    # --- –ü–æ–¥–º–µ–Ω—é –°–æ–≤–µ—Ç—ã ---
    elif query.data == 'tricks':
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='tips')]]
        query.edit_message_text(
            "‚ö†Ô∏è –ù–µ –¥–æ–≤–µ—Ä—è–π –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–º —Å—Å—ã–ª–∫–∞–º –∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º –æ—Ç –Ω–µ–∑–Ω–∞–∫–æ–º—Ü–µ–≤.\n"
            "‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—è–π –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º –¥–µ–Ω–µ–≥.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif query.data == 'payments':
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='tips')]]
        query.edit_message_text(
            "üí≥ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç—ë–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.\n"
            "üí≥ –ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ–æ–±—â–∞–π PIN-–∫–æ–¥—ã –∏ CVV.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    # --- –¢–µ—Å—Ç —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ ---
    elif query.data.startswith('q'):
        questions = {
            'q1': {'text': "–ú–æ–∂–Ω–æ –ª–∏ –¥–æ–≤–µ—Ä—è—Ç—å –Ω–µ–∑–Ω–∞–∫–æ–º–æ–º—É —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–±–µ—â–∞–µ—Ç –±—ã—Å—Ç—Ä–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å?", 'yes': False},
            'q2': {'text': "–°—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Å—ã–ª–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º?", 'yes': True},
            'q3': {'text': "–ú–æ–∂–Ω–æ –ª–∏ —Å–æ–æ–±—â–∞—Ç—å —Å–≤–æ–∏ –ø–∞—Ä–æ–ª–∏ –¥—Ä—É–∑—å—è–º?", 'yes': False}
        }

        if query.data in questions:
            question = questions[query.data]
            keyboard = [
                [InlineKeyboardButton("–î–∞", callback_data=f"{query.data}_yes")],
                [InlineKeyboardButton("–ù–µ—Ç", callback_data=f"{query.data}_no")],
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='quiz')]
            ]
            query.edit_message_text(question['text'], reply_markup=InlineKeyboardMarkup(keyboard))

        elif query.data.endswith('_yes') or query.data.endswith('_no'):
            q_key = query.data[:-4]
            answer = query.data.endswith('_yes')
            correct = questions[q_key]['yes']
            if answer == correct:
                user_scores[user_id] += 1
                query.edit_message_text("‚úÖ –í–µ—Ä–Ω–æ!", reply_markup=None)
            else:
                query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω–æ!", reply_markup=None)

            next_question = {'q1':'q2', 'q2':'q3', 'q3':None}[q_key]
            if next_question:
                keyboard = [[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data=next_question)],
                            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='quiz')]]
                query.message.reply_text("–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:", reply_markup=InlineKeyboardMarkup(keyboard))
            else:
                score = user_scores[user_id]
                query.message.reply_text(f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –¢—ã –Ω–∞–±—Ä–∞–ª {score}/3 –±–∞–ª–ª–æ–≤.",
                                       reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back')]]))

    elif query.data == 'back':
        start(update, context)

# --- –ö–æ–º–∞–Ω–¥–∞ /help ---
def help_command(update: Update, context: CallbackContext):
    update.message.reply_text("–ù–∞–∂–º–∏ /start –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –∏–∑—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")

# --- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
dp.add_handler(CommandHandler("start", start))
dp.add_handler(CommandHandler("help", help_command))
dp.add_handler(CallbackQueryHandler(button))

# --- Webhook –¥–ª—è Telegram ---
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(), bot)
    dp.process_update(update)
    return "ok"

# --- –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞ ---
@app.route("/")
def index():
    return "Bot is running!"

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
